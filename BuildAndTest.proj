<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0"
         DefaultTargets="BuildAndTest"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">


  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)'=='' ">Debug</Configuration>
    <OutDir Condition=" '$(OutDir)'=='' ">$(MSBuildThisFileDirectory)bin\$(Configuration)\</OutDir>
    <NuGetToolPath Condition="'$(NuGetToolPath)'==''">$(MSBuildThisFileDirectory)NuGet\NuGet.exe</NuGetToolPath>
    <IrisDir Condition="'$(IrisPath)'==''">$(MSBuildThisFileDirectory)Iris\</IrisDir>
    <HelloWorldDir Condition="'$(HelloWorldPath)'==''">$(MSBuildThisFileDirectory)HelloWorld\</HelloWorldDir>

    <TargetsToRun>Build;Test</TargetsToRun>
  </PropertyGroup>

  <!-- Inline task to bootstrap the build to enable downloading nuget.exe -->
  <UsingTask TaskName="DownloadFile" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <Address ParameterType="System.String" Required="true" />
      <FileName ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System" />
      <Reference Include="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            var directory = System.IO.Path.GetDirectoryName(FileName);
            Directory.CreateDirectory(directory);

            var tempFile = Path.Combine(directory, Path.GetRandomFileName());
            var client = new System.Net.WebClient();
            client.Proxy = System.Net.WebRequest.DefaultWebProxy;
            if (client.Proxy != null) client.Proxy.Credentials = System.Net.CredentialCache.DefaultCredentials;
            var tryCount = 1;
            var maxTries = 3;

            while (tryCount <= maxTries)
            {
                try
                {
                    Log.LogMessage("Attempting to download {0}...", Address);
                    client.DownloadFile(Address, tempFile);
                    break;
                }
                catch (System.Net.WebException e)
                {
                    tryCount++;
                    if (tryCount > maxTries)
                    {
                        throw;
                    }
                    else
                    {
                        Log.LogMessage(MessageImportance.High, "Download failed, retrying: {0}", e.Message);
                    }
                }
            }

            try
            {
                if (!File.Exists(FileName))
                    File.Move(tempFile, FileName);
            }
            finally
            {
                if (File.Exists(tempFile))
                    File.Delete(tempFile);
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <ItemGroup>
    <Solution Include="$(IrisDir)Iris.sln;$(HelloWorldDir)cs\HelloWorld.sln">
      <AdditionalProperties>Configuration=$(Configuration)</AdditionalProperties>
    </Solution>
    <Solution Include="$(HelloWorldDir)cpp\HelloWorld.sln">
      <AdditionalProperties>Configuration=$(Configuration);Platform=Win32</AdditionalProperties>
    </Solution>
    <Solution Include="$(MSBuildThisFileDirectory)CppCustomVisualizer\CppCustomVisualizer.sln">
      <AdditionalProperties>Configuration=$(Configuration);Platform=x86</AdditionalProperties>
    </Solution>
  </ItemGroup>

  <Target Name="DownloadNuGet"
          Outputs="$(NuGetToolPath)">

    <DownloadFile FileName="$(NuGetToolPath)"
                  Address="https://dist.nuget.org/win-x86-commandline/latest/nuget.exe"
                  Condition="!Exists('$(NuGetToolPath)')" />
  </Target>

  <Target Name="RestorePackages" DependsOnTargets="DownloadNuGet">
    <Exec Command="&quot;$(NuGetToolPath)&quot; restore &quot;%(Solution.Identity)&quot;" />
  </Target>

  <Target Name="Clean">
    <MSBuild Targets="Clean"
             Projects="@(Solution)" />
  </Target>

  <Target Name="Build" DependsOnTargets="RestorePackages">
    <MSBuild Targets="Build"
             Projects="@(Solution)" />
  </Target>

  <Target Name="Rebuild" DependsOnTargets="RestorePackages">
    <MSBuild Targets="Rebuild"
             Projects="@(Solution)" />
  </Target>
  
  <Target Name="Test">
 
    <!-- Run Iris front end test -->
    <Exec Command="mstest /testcontainer:&quot;$(IrisDir)\FrontEndTest\bin\$(Configuration)\FrontEndTest.dll&quot;" />
    
  </Target>
  
  <Target Name="BuildAndTest"
          DependsOnTargets="$(TargetsToRun)" />

</Project>